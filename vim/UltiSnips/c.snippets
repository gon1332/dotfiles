

snippet def "#define ..."
#define ${1}
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
    ${0}
#endif
endsnippet

snippet inc "#include <...>"
#include <${1}.h>
endsnippet

snippet Inc "#include local header"
#include "${1:`!p snip.rv = snip.basename`}.h"
endsnippet

snippet main "main function" b
int main(${1:int argc, char *argv[]})
{
    ${2}
    return 0;
}
endsnippet

snippet for "for loop (for)"
for ($1; $2; $3) {
    ${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
    ${0}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet gu "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
    import random, string
    name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
    rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
    snip.rv = ('%s_%s' % (name,rand)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* $1 */

endsnippet


snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet


snippet wh "while loop"
while (${1:/* condition */}) {
    ${0}
}
endsnippet


snippet do "do...while loop (do)"
do {
    ${0}
} while(${1:/* condition */});
endsnippet


snippet if "if .. (if)"
if (${1:/* condition */}) {
    ${0}
}
endsnippet

snippet el "else .. (else)"
else {
    ${0}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
    ${0}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */}) {
    ${2}
} else {
    ${3:/* else */}
}
endsnippet


snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
    ${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
    ${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

snippet todo "This is a TODO reminder" b
/* TODO: `echo $USER` ${1:desc} `!v strftime("%c")` */
endsnippet
